// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  photoProfile       String?   @default("default-photo-profile.png")
  username           String?   @unique
  email              String    @unique
  password           String
  role               Role      @default(USER)
  verified           Boolean   @default(false)
  verificationCode   String?   @unique @db.Text
  tweets             Tweet[]   @relation("UserTweets")
  likes              Like[]    @relation("UserLikes")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  provider           String?
  passwordResetToken String?
  passwordResetAt    DateTime?

  @@unique([email, verificationCode, username, passwordResetToken])
  @@index([email, verificationCode, username, passwordResetToken])
  @@map(name: "users")
}

enum Role {
  USER
  ADMIN
}

model Tweet {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation("UserTweets", fields: [authorId], references: [id])

  replies Reply[] @relation("TweetReplies")
  like    Like?   @relation("TweetLike")

  @@map(name: "tweets")
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tweetId String
  Tweet   Tweet  @relation("TweetReplies", fields: [tweetId], references: [id])
  like    Like?  @relation("ReplyLike")

  @@map("replies")
}

model Like {
  id String @id @default(uuid())

  userId String
  user   User   @relation("UserLikes", fields: [userId], references: [id])

  tweetId String @unique
  tweet   Tweet  @relation("TweetLike", fields: [tweetId], references: [id])

  replyId String @unique
  reply   Reply  @relation("ReplyLike", fields: [replyId], references: [id])

  @@unique([tweetId, replyId])
  @@map("likes")
}
