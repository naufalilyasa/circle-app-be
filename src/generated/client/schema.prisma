// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  name               String
  photoProfile       String?   @default("https://github.com/shadcn.png")
  banner             String?
  username           String?   @unique
  bio                String?
  email              String    @unique
  password           String
  role               Role      @default(USER)
  verified           Boolean   @default(false)
  verificationCode   String?   @unique @db.Text
  tweets             Tweet[]   @relation("UserTweets")
  likes              Like[]    @relation("UserLikes")
  replies            Reply[]   @relation("UserTweetReplies")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  provider           String?
  passwordResetToken String?
  passwordResetAt    DateTime?
  followers          Follow[]  @relation("FollowedBy")
  following          Follow[]  @relation("Following")

  @@unique([email, verificationCode, username, passwordResetToken])
  @@index([email, verificationCode, username, passwordResetToken])
  @@map(name: "users")
}

enum Role {
  USER
  ADMIN
}

model Tweet {
  id        String   @id @default(uuid())
  content   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation("UserTweets", fields: [authorId], references: [id])
  replies   Reply[]  @relation("TweetReplies")
  likes     Like[]   @relation("TweetLike")

  @@map(name: "tweets")
}

model Reply {
  id        String   @id @default(uuid())
  content   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweetId   String
  Tweet     Tweet    @relation("TweetReplies", fields: [tweetId], references: [id])
  authorId  String
  author    User     @relation("UserTweetReplies", fields: [authorId], references: [id])
  likes     Like[]   @relation("ReplyLike")

  @@map("replies")
}

model Like {
  id      String  @id @default(uuid())
  userId  String
  user    User    @relation("UserLikes", fields: [userId], references: [id])
  tweetId String?
  tweet   Tweet?  @relation("TweetLike", fields: [tweetId], references: [id])
  replyId String?
  reply   Reply?  @relation("ReplyLike", fields: [replyId], references: [id])

  @@unique([userId, tweetId])
  @@unique([userId, replyId])
  @@map("likes")
}

model Follow {
  id         String @id @default(uuid())
  follower   User   @relation("Following", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("FollowedBy", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}
